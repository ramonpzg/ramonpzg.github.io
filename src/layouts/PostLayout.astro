---
import Layout from './Layout.astro';
import Dock from '../components/Dock.astro';
import { render } from 'astro:content';

interface Props {
  post: any;
}

const { post } = Astro.props;
const { Content } = await render(post);

// Format date
const publishDate = new Date(post.data.pubDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<Layout title={post.data.title}>
  <main class="max-w-3xl mx-auto px-4 py-12">
    <!-- Breadcrumb -->
    <nav class="flex items-center space-x-2 text-sm mb-8 text-text-300">
      <a href="/" class="hover:text-primary-400">Home</a>
      <span>/</span>
      <a href="/read" class="hover:text-primary-400">Read</a>
      <span>/</span>
      <span class="text-text-50">{post.data.title}</span>
    </nav>

    <article class="prose prose-invert prose-primary max-w-none">
      <!-- Post Header -->
      <header class="mb-8 not-prose">
        <h1 class="text-4xl font-bold text-text-50 mb-4">{post.data.title}</h1>
        <div class="flex items-center space-x-4 text-sm text-text-300">
          <time datetime={post.data.pubDate.toISOString()}>
            {publishDate}
          </time>
          {post.data.readingTime && (
            <>
              <span>â€¢</span>
              <span>{post.data.readingTime}</span>
            </>
          )}
        </div>
      </header>

      <!-- Tags -->
      {post.data.tags && (
        <div class="flex flex-wrap gap-2 mb-8 not-prose">
          {post.data.tags.map((tag: string) => (
            <span class="px-3 py-1 text-sm rounded-full bg-primary-400/10 text-primary-400">
              {tag}
            </span>
          ))}
        </div>
      )}

      <!-- Post Content -->
      <div class="mt-8">
        <Content />
      </div>
    </article>

    <!-- Dock Menu -->
    <Dock />
  </main>
</Layout>

<style>
  /* Style markdown content */
  :global(.prose) {
    color: var(--text-300);
  }

  :global(.prose h1),
  :global(.prose h2),
  :global(.prose h3),
  :global(.prose h4) {
    color: var(--text-50);
    font-weight: 600;
    margin-top: 2em;
    margin-bottom: 1em;
  }

  :global(.prose h2) {
    font-size: 1.875rem;
    border-bottom: 1px solid rgba(var(--text-400), 0.1);
    padding-bottom: 0.5rem;
  }

  :global(.prose h3) {
    font-size: 1.5rem;
  }

  :global(.prose p) {
    margin-bottom: 1.5em;
    line-height: 1.75;
  }

  :global(.prose a) {
    color: var(--primary-400);
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s ease;
  }

  :global(.prose a:hover) {
    border-color: var(--primary-400);
  }

  :global(.prose code) {
    background: rgba(74, 222, 128, 0.1);
    color: rgb(74, 222, 128);
    padding: 0.2em 0.4em;
    border-radius: 0.25em;
    font-size: 0.875em;
  }

  :global(.prose pre) {
    background: rgba(var(--background-800), 0.5);
    border: 1px solid rgba(var(--text-400), 0.1);
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
  }

  :global(.prose pre code) {
    background: none;
    color: inherit;
    padding: 0;
    border-radius: 0;
  }

  :global(.prose blockquote) {
    border-left: 4px solid var(--primary-400);
    padding-left: 1rem;
    color: var(--text-300);
    font-style: italic;
  }

  :global(.prose ul),
  :global(.prose ol) {
    padding-left: 1.5rem;
    margin-bottom: 1.5em;
  }

  :global(.prose li) {
    margin-bottom: 0.5em;
  }

  main {
    padding-bottom: 120px;
  }
</style>
