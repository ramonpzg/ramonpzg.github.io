---
interface Props {
  video: {
    id: string;
    data: {
      title: string;
      description: string;
      pubDate: string;  // Changed from publishedDate to pubDate
      videoUrl: string;
      thumbnailUrl: string;
      duration: string;
      tags: string[];
    };
  };
}

const { video } = Astro.props;
const { title, description, pubDate, thumbnailUrl, tags, duration } = video.data;

// Parse the date string first
const dateObj = new Date(pubDate);
const formattedDate = dateObj.toLocaleDateString('en-US', {
  month: 'short',
  day: 'numeric',
  year: 'numeric'
});
---

<div class="video-card">
  <!-- Sketch Effects -->
  <svg class="filters">
    <defs>
      <!-- Rough paper texture -->
      <filter id="paper-texture">
        <feTurbulence type="fractalNoise" baseFrequency="0.8" numOctaves="3" seed={Math.random() * 100}/>
        <feColorMatrix type="saturate" values="0"/>
        <feBlend mode="multiply" in="SourceGraphic"/>
      </filter>

      <!-- Pencil stroke effect -->
      <filter id="pencil-stroke">
        <feTurbulence type="fractalNoise" baseFrequency="0.01" numOctaves="3"/>
        <feDisplacementMap in="SourceGraphic" scale="2"/>
      </filter>
    </defs>
  </svg>

  <a href={`/watch/${video.id}`} class="card-content">
    <!-- Thumbnail with sketch overlay -->
    <div class="thumbnail-container">
      <div class="sketch-overlay"></div>
      <img
        src={thumbnailUrl}
        alt={title}
        class="thumbnail"
        loading="lazy"
      />
      <span class="duration">{duration}</span>
    </div>

    <div class="content">
      <h3 class="title">{title}</h3>
      <p class="description">{description}</p>

      <div class="meta">
        <div class="tags">
          {tags.slice(0, 2).map(tag => (
            <span class="tag">{tag}</span>
          ))}
        </div>
        <time class="date">
          {formattedDate}
        </time>
      </div>
    </div>

    <!-- Decorative corner doodles -->
    <div class="corner-doodle top-left"></div>
    <div class="corner-doodle top-right"></div>
    <div class="corner-doodle bottom-left"></div>
    <div class="corner-doodle bottom-right"></div>
  </a>
</div>

<style>
  .video-card {
    position: relative;
    width: 100%;
    background: rgba(var(--background-800), 0.7);
    border-radius: 12px;
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .filters {
    width: 0;
    height: 0;
    position: absolute;
  }

  .card-content {
    position: relative;
    display: block;
    text-decoration: none;
    color: inherit;
    overflow: hidden;
  }

  .thumbnail-container {
    position: relative;
    padding-top: 56.25%; /* 16:9 aspect ratio */
    overflow: hidden;
  }

  .thumbnail {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: url(#paper-texture);
    transition: transform 0.3s ease;
  }

  .sketch-overlay {
    position: absolute;
    inset: 0;
    border: 2px solid var(--text-400);
    filter: url(#pencil-stroke);
    opacity: 0.1;
    z-index: 1;
    pointer-events: none;
  }

  .duration {
    position: absolute;
    bottom: 0.5rem;
    right: 0.5rem;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    z-index: 2;
  }

  .content {
    padding: 1rem;
  }

  .title {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-50);
    margin-bottom: 0.25rem;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .description {
    font-size: 0.875rem;
    color: var(--text-300);
    margin-bottom: 0.75rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.75rem;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }

  .tag {
    background: rgba(var(--primary-400), 0.1);
    color: var(--primary-400);
    padding: 0.125rem 0.375rem;
    border-radius: 4px;
    filter: url(#pencil-stroke);
  }

  .date {
    color: var(--text-400);
  }

  .corner-doodle {
    position: absolute;
    width: 20px;
    height: 20px;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .corner-doodle::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: var(--primary-400);
    filter: url(#pencil-stroke);
    opacity: 0.2;
  }

  .top-left {
    top: 0;
    left: 0;
    border-top: 2px solid;
    border-left: 2px solid;
  }

  .top-right {
    top: 0;
    right: 0;
    border-top: 2px solid;
    border-right: 2px solid;
  }

  .bottom-left {
    bottom: 0;
    left: 0;
    border-bottom: 2px solid;
    border-left: 2px solid;
  }

  .bottom-right {
    bottom: 0;
    right: 0;
    border-bottom: 2px solid;
    border-right: 2px solid;
  }

  .video-card:hover {
    transform: translateY(-2px);
  }

  .video-card:hover .corner-doodle {
    opacity: 1;
  }

  .video-card:hover .thumbnail {
    transform: scale(1.05);
  }

  /* Random rotation for organic feel */
  .video-card:nth-child(3n) {
    transform: rotate(0.5deg);
  }

  .video-card:nth-child(3n+1) {
    transform: rotate(-0.5deg);
  }

  @media (hover: hover) {
    .video-card::after {
      content: '';
      position: absolute;
      inset: 0;
      background: var(--primary-400);
      opacity: 0;
      transition: opacity 0.3s ease;
      pointer-events: none;
      filter: url(#paper-texture);
    }

    .video-card:hover::after {
      opacity: 0.05;
    }
  }
</style>
